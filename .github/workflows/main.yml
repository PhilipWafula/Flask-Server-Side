name: Flask-Server-Side CI-CD
'on':
  - push
  - pull_request
jobs:
  build_and_test:
    strategy:
      matrix:
        python-version:
          - '3.6'
          - '3.7'
          - '3.8'
    runs-on: ubuntu-latest
    env:
      DEPLOYMENT_NAME: DOCKER
      $PYTHONPATH: home/runner/worker/Flask-Server-Side
    services:
      postgres:
        image: 'postgres:11.7'
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_HOST: localhost
          POSTGRES_DB: flask_server_side_docker
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: 'redis:latest'
        ports:
          - '6379:6379'
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v1
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: '${{ matrix.python-version }}'
          architecture: x64
      - name: Setup git secrets
        run: |
          sudo apt-get update && sudo apt-get install apt-transport-https

          echo "deb https://dl.bintray.com/sobolevn/deb git-secret main" | sudo tee -a /etc/apt/sources.list

          wget -qO - https://api.bintray.com/users/sobolevn/keys/gpg/public.key | sudo apt-key add -

          sudo apt-get update && sudo apt-get install git-secret

          echo -e "${{ secrets.GPG_KEY }}" | gpg --import

          git secret reveal -f
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: '${{ runner.os }}-pip-${{ hashFiles(''**/requirements.txt'') }}'
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          cd devtools
          source install_requirements.sh
      - name: test suite and upload test coverage
        run: |
          coverage run run_test_suite.py
      - name: Upload test coverage to CodeCov
        uses: codecov/codecov-action@v1
        with:
          token: '${{ secrets.CODECOV_TOKEN }}'
          file: ./coverage
          env_vars: 'OS,PYTHON'
          name: codecov-umbrella
          fail_ci_if_error: true